package mara.mybox.db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import mara.mybox.data.Location;
import static mara.mybox.db.DerbyBase.dbHome;
import static mara.mybox.db.DerbyBase.failed;
import static mara.mybox.db.DerbyBase.login;
import static mara.mybox.db.DerbyBase.protocol;
import mara.mybox.tools.DateTools;
import static mara.mybox.value.AppVariables.logger;

/**
 * @Author Mara
 * @CreateDate 2020-1-19
 * @License Apache License Version 2.0
 */
public class TableLocation extends DerbyBase {

    public TableLocation() {
        Table_Name = "Location";
        Keys = new ArrayList<>() {
            {
                add("dataid");
            }
        };
        Create_Table_Statement
                = " CREATE TABLE Location ( "
                + "  dataid BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1), "
                + "  data_set VARCHAR(1024) NOT NULL, "
                + "  data_label VARCHAR(1024), "
                + "  source VARCHAR(1024), "
                + "  address VARCHAR(2048) NOT NULL, "
                + "  longitude DOUBLE NOT NULL, "
                + "  latitude DOUBLE NOT NULL, "
                + "  altitude DOUBLE, "
                + "  precision DOUBLE, "
                + "  speed DOUBLE, "
                + "  direction SMALLINT, "
                + "  coordinate_system SMALLINT, "
                + "  comments VARCHAR(32672), "
                + "  image_location  VARCHAR(1024), "
                + "  data_value DOUBLE, "
                + "  data_size DOUBLE, "
                + "  data_time TIMESTAMP, "
                + "  data_time_bc SMALLINT, " // Looks Derby does not support date BC(before Christ)
                + "  PRIMARY KEY (dataid)"
                + " )";

    }

    public static int size() {
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = " SELECT count(dataid) FROM Location";
            ResultSet results = statement.executeQuery(sql);
            if (results.next()) {
                return results.getInt(1);
            } else {
                return 0;
            }
        } catch (Exception e) {
            failed(e);
            return 0;
        }
    }

    public static List<String> datasets() {
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            List<String> datasets = new ArrayList();
            String sql = " SELECT DISTINCT data_set FROM Location";
            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                datasets.add(results.getString("data_set"));
            }
            return datasets;
        } catch (Exception e) {
            failed(e);
//            // logger.debug(e.toString());
            return null;
        }
    }

    public static List<Location> read() {
        return read(0);
    }

    public static List<Location> read(int max) {
        List<Location> locations = new ArrayList<>();
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            statement.setMaxRows(max);
            String sql = "SELECT * FROM Location";
            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                Location location = read(results);
                locations.add(location);
            }
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
        }
        return locations;
    }

    public static List<Location> read(int offset, int number) {
        List<Location> locations = new ArrayList<>();
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = "SELECT * FROM Location OFFSET "
                    + offset + " ROWS FETCH NEXT " + number + " ROWS ONLY";
            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                Location location = read(results);
                locations.add(location);
            }
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
        }
        return locations;
    }

    public static List<Location> read(String dataset) {
        return read(dataset, 0);
    }

    public static List<Location> read(String dataset, int max) {
        List<Location> locations = new ArrayList<>();
        if (dataset == null) {
            return locations;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            statement.setMaxRows(max);
            String sql = "SELECT * FROM Location WHERE data_set='" + dataset + "'";
            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                Location location = read(results);
                locations.add(location);
            }
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
        }
        return locations;
    }

    public static List<Location> read(String dataset, int offset, int number) {
        List<Location> locations = new ArrayList<>();
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = "SELECT * FROM Location  WHERE data_set='" + dataset + "' OFFSET "
                    + offset + " ROWS FETCH NEXT " + number + " ROWS ONLY";
            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                Location location = read(results);
                locations.add(location);
            }
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
        }
        return locations;
    }

    public static List<Location> readOrder(String dataset, String order,
            boolean desc) {
        List<Location> locations = new ArrayList<>();
        if (dataset == null || order == null) {
            return locations;
        }
        if ("data_time".equals(order)) {
            return readOrderTime(dataset, desc);
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = "SELECT * FROM Location WHERE data_set='" + dataset + "' ORDER BY " + order;
            if (desc) {
                sql += " DESC";
            } else {
                sql += " ASC";
            }
            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                Location location = read(results);
                locations.add(location);
            }
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
        }
        return locations;
    }

    public static List<Location> readOrderTime(String dataset, boolean desc) {
        List<Location> locations = new ArrayList<>();
        if (dataset == null) {
            return locations;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            if (desc) {
                String sql = "SELECT * FROM Location WHERE data_set='" + dataset + "' AND data_time_bc=0 ORDER BY  data_time DESC";
                ResultSet results = statement.executeQuery(sql);
                while (results.next()) {
                    Location location = read(results);
                    locations.add(location);
                }
                sql = "SELECT * FROM Location WHERE data_set='" + dataset + "' AND data_time_bc=1 ORDER BY  data_time ASC";
                results = statement.executeQuery(sql);
                while (results.next()) {
                    Location location = read(results);
                    locations.add(location);
                }
            } else {
                String sql = "SELECT * FROM Location WHERE data_set='" + dataset + "' AND data_time_bc=1 ORDER BY  data_time DESC";
                ResultSet results = statement.executeQuery(sql);
                while (results.next()) {
                    Location location = read(results);
                    locations.add(location);
                }
                sql = "SELECT * FROM Location WHERE data_set='" + dataset + "' AND data_time_bc=0 ORDER BY  data_time ASC";
                results = statement.executeQuery(sql);
                while (results.next()) {
                    Location location = read(results);
                    locations.add(location);
                }
            }
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
        }
        return locations;
    }

    public static List<Location> readBetween(String dataset, Date from, Date to,
            boolean desc) {
        List<Location> locations = new ArrayList<>();
        if (dataset == null || from == null || to == null) {
            return locations;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = "SELECT * FROM Location WHERE data_set='" + dataset
                    + " AND data_time > '" + DateTools.datetimeToString(from) + "' "
                    + " AND data_time < '" + DateTools.datetimeToString(to) + "' "
                    + "' ORDER BY  data_time ";
            if (desc) {
                sql += "DESC";
            } else {
                sql += "ASC";
            }
            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                Location location = read(results);
                locations.add(location);
            }
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
        }
        return locations;
    }

    public static List<Location> readBefore(String dataset, Date before,
            boolean desc) {
        List<Location> locations = new ArrayList<>();
        if (dataset == null || before == null) {
            return locations;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = "SELECT * FROM Location WHERE data_set='" + dataset
                    + " AND data_time < '" + DateTools.datetimeToString(before) + "' "
                    + "' ORDER BY  data_time ";
            if (desc) {
                sql += "DESC";
            } else {
                sql += "ASC";
            }
            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                Location location = read(results);
                locations.add(location);
            }
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
        }
        return locations;
    }

    public static List<Location> readAfter(String dataset, Date after,
            boolean desc) {
        List<Location> locations = new ArrayList<>();
        if (dataset == null || after == null) {
            return locations;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = "SELECT * FROM Location WHERE data_set='" + dataset
                    + " AND data_time > '" + DateTools.datetimeToString(after) + "' "
                    + "' ORDER BY  data_time ";
            if (desc) {
                sql += "DESC";
            } else {
                sql += "ASC";
            }
            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                Location location = read(results);
                locations.add(location);
            }
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
        }
        return locations;
    }

    public static Location read(ResultSet results) {
        if (results == null) {
            return null;
        }
        try {
            Location location = new Location();
            location.setDataid(results.getLong("dataid"));
            location.setDataSet(results.getString("data_set"));
            location.setSource(results.getString("source"));
            location.setAddress(results.getString("address"));
            location.setLongitude(results.getDouble("longitude"));
            location.setLatitude(results.getDouble("latitude"));
            location.setAltitude(results.getDouble("altitude"));
            location.setPrecision(results.getDouble("precision"));
            location.setSpeed(results.getDouble("speed"));
            location.setDirection(results.getShort("direction"));
            location.setCoordinateSystem(results.getShort("coordinate_system"));
            location.setComments(results.getString("comments"));
            location.setImageLocation(results.getString("image_location"));
            location.setDataValue(results.getDouble("data_value"));
            location.setDataSize(results.getDouble("data_size"));
            Date d = results.getTimestamp("data_time");
            if (d != null) {
                location.setDataTime(d.getTime());
            }
            location.setTimeBC(results.getShort("data_time_bc") > 0);
            location.setDataLabel(results.getString("data_label"));
            return location;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return null;
        }
    }

    public static boolean write(Location location) {
        if (location == null) {
            return false;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            if (location.getDataid() < 0) {
                create(statement, location);
            } else {
                update(statement, location);
            }
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean write(List<Location> locations) {
        if (locations == null || locations.isEmpty()) {
            return false;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            conn.setAutoCommit(false);
            for (Location location : locations) {
                if (location.getDataid() < 0) {
                    create(statement, location);
                } else {
                    update(statement, location);
                }
            }
            conn.commit();
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean create(Statement statement, Location location) {
        if (statement == null || location == null) {
            return false;
        }
        try {
            String sql = "INSERT INTO Location(data_set, source, address, longitude, latitude, altitude, precision, speed, direction, "
                    + "coordinate_system,  comments, image_location, data_value, data_size, data_time, data_time_bc, data_label) VALUES(";
            sql += "'" + location.getDataSet() + "', ";
            if (location.getSource() != null) {
                sql += "'" + location.getSource() + "', ";
            } else {
                sql += "null, ";
            }
            if (location.getAddress() != null) {
                sql += "'" + location.getAddress() + "', ";
            } else {
                sql += "null, ";
            }
            sql += location.getLongitude() + ", ";
            sql += location.getLatitude() + ", ";
            sql += location.getAltitude() + ", ";
            sql += location.getPrecision() + ", ";
            sql += location.getSpeed() + ", ";
            sql += location.getDirection() + ", ";
            sql += location.getCoordinateSystem() + ", ";
            if (location.getComments() != null) {
                sql += "'" + location.getComments() + "', ";
            } else {
                sql += "null, ";
            }
            if (location.getImageLocation() != null) {
                sql += "'" + location.getImageLocation() + "', ";
            } else {
                sql += "null, ";
            }
            sql += location.getDataValue() + ", ";
            sql += location.getDataSize() + ", ";
            if (location.getDataTime() > 0) {
                sql += "'" + DateTools.datetimeToString(location.getDataTime()) + "', ";
            } else {
                sql += "null, ";
            }
            sql += location.isTimeBC() ? "1, " : "0, ";
            if (location.getDataLabel() != null) {
                sql += "'" + location.getDataLabel() + "' ";
            } else {
                sql += "null  ";
            }
            sql += " )";
            statement.executeUpdate(sql);
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean update(Statement statement, Location location) {
        if (statement == null || location == null || location.getDataid() < 0) {
            return false;
        }
        try {
            statement.setMaxRows(1);
            String sql = "UPDATE Location SET ";
            sql += "data_set='" + location.getDataSet() + "', ";
            if (location.getSource() != null) {
                sql += "source='" + location.getSource() + "', ";
            } else {
                sql += "source=null, ";
            }
            if (location.getAddress() != null) {
                sql += "address='" + location.getAddress() + "', ";
            } else {
                sql += "address=null, ";
            }
            sql += "longitude=" + location.getLongitude() + ", ";
            sql += "latitude=" + location.getLatitude() + ", ";
            sql += "altitude=" + location.getAltitude() + ", ";
            sql += "precision=" + location.getPrecision() + ", ";
            sql += "speed=" + location.getSpeed() + ", ";
            sql += "direction=" + location.getDirection() + ", ";
            sql += "coordinate_system=" + location.getCoordinateSystem() + ", ";
            if (location.getComments() != null) {
                sql += "comments='" + location.getComments() + "', ";
            } else {
                sql += "comments=null, ";
            }
            if (location.getImageLocation() != null) {
                sql += "image_location='" + location.getImageLocation() + "', ";
            } else {
                sql += "image_location=null, ";
            }
            sql += "data_value=" + location.getDataValue() + ", ";
            sql += "data_size=" + location.getDataSize() + ", ";
            if (location.getDataTime() > 0) {
                sql += "data_time='" + DateTools.datetimeToString(location.getDataTime()) + "',  ";
            } else {
                sql += "data_time=null, ";
            }
            sql += "data_time_bc=" + (location.isTimeBC() ? "1, " : "0, ");
            if (location.getDataLabel() != null) {
                sql += "data_label='" + location.getDataLabel() + "' ";
            } else {
                sql += "data_label=null  ";
            }
            sql += "WHERE dataid=" + location.getDataid();

            statement.executeUpdate(sql);
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean delete(long dataid) {
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = "DELETE FROM Location WHERE dataid=" + dataid;
            statement.executeUpdate(sql);
            return true;
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return false;
        }
    }

    public static boolean delete(String dataset) {
        if (dataset == null) {
            return false;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = "DELETE FROM Location WHERE data_set='" + dataset + "'";
            statement.executeUpdate(sql);
            return true;
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return false;
        }
    }

    public static boolean deleteData(List<Location> values) {
        if (values == null || values.isEmpty()) {
            return false;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String inStr = "( " + values.get(0).getDataid();
            for (int i = 1; i < values.size(); ++i) {
                inStr += ", " + values.get(i).getDataid();
            }
            inStr += " )";
            String sql = "DELETE FROM Location WHERE dataid IN " + inStr;
            statement.executeUpdate(sql);
            return true;
        } catch (Exception e) {
            failed(e);
//            // logger.debug(e.toString());
            return false;
        }
    }

    public static boolean deleteBefore(String dataset, Date before) {
        if (dataset == null || before == null) {
            return false;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = "DELETE FROM Location WHERE data_set='" + dataset + "'"
                    + " AND data_time < '" + DateTools.datetimeToString(before) + "' ";
            statement.executeUpdate(sql);
            return true;
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return false;
        }
    }

    public static boolean deleteAfter(String dataset, Date after) {
        if (dataset == null || after == null) {
            return false;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = "DELETE FROM Location WHERE data_set='" + dataset + "'"
                    + " AND data_time > '" + DateTools.datetimeToString(after) + "' ";
            statement.executeUpdate(sql);
            return true;
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return false;
        }
    }

    public static boolean deleteBetween(String dataset, Date from, Date to) {
        if (dataset == null || from == null || to == null) {
            return false;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = "DELETE FROM Location WHERE data_set='" + dataset + "'"
                    + " AND data_time > '" + DateTools.datetimeToString(from) + "' "
                    + " AND data_time < '" + DateTools.datetimeToString(to) + "' ";
            statement.executeUpdate(sql);
            return true;
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return false;
        }
    }
}
