package mara.mybox.db;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import mara.mybox.data.EpidemicReport;
import static mara.mybox.db.DerbyBase.dbHome;
import static mara.mybox.db.DerbyBase.failed;
import static mara.mybox.db.DerbyBase.login;
import static mara.mybox.db.DerbyBase.protocol;
import mara.mybox.tools.DateTools;
import mara.mybox.value.AppVariables;
import static mara.mybox.value.AppVariables.logger;
import static mara.mybox.value.AppVariables.message;

/**
 * @Author Mara
 * @CreateDate 2020-2-2
 * @License Apache License Version 2.0
 */
public class TableEpidemicReport extends DerbyBase {

    public TableEpidemicReport() {
        Table_Name = "Epidemic_Report";
        Keys = new ArrayList<>() {
            {
                add("dataid");
            }
        };
        Create_Table_Statement
                = " CREATE TABLE Epidemic_Report ( "
                + "  dataid BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1), "
                + "  data_set VARCHAR(1024) NOT NULL, "
                + "  data_label VARCHAR(1024), "
                + "  longitude DOUBLE , "
                + "  latitude DOUBLE , "
                + "  level VARCHAR(1024) , "
                + "  country VARCHAR(1024), "
                + "  province VARCHAR(1024), "
                + "  city VARCHAR(1024), "
                + "  district VARCHAR(2048), "
                + "  township VARCHAR(2048), "
                + "  neighborhood VARCHAR(2048), "
                + "  confirmed INTEGER, "
                + "  suspected INTEGER, "
                + "  healed INTEGER, "
                + "  dead INTEGER, "
                + "  increased_confirmed INTEGER, "
                + "  increased_suspected INTEGER, "
                + "  increased_healed INTEGER, "
                + "  increased_dead INTEGER, "
                + "  comments VARCHAR(32672), "
                + "  time TIMESTAMP  NOT NULL, "
                + "  PRIMARY KEY (dataid)"
                + " )";

    }

    public static int size() {
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = " SELECT count(dataid) FROM Epidemic_Report";
            ResultSet results = statement.executeQuery(sql);
            if (results.next()) {
                return results.getInt(1);
            } else {
                return 0;
            }
        } catch (Exception e) {
            failed(e);
            return 0;
        }
    }

    public static void moveDataid() {
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            long max = 0;
            String sql = "SELECT max(dataid) FROM Epidemic_Report";
            try ( ResultSet results = statement.executeQuery(sql)) {
                if (results.next()) {
                    max = results.getInt(1);
                }
            }
            sql = "ALTER TABLE Epidemic_Report ALTER COLUMN dataid RESTART WITH " + (max + 1);
            statement.executeUpdate(sql);
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
        }
    }

    public static int sizeQuery(String sql) {
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            ResultSet results = statement.executeQuery(sql);
            if (results.next()) {
                return results.getInt(1);
            } else {
                return 0;
            }
        } catch (Exception e) {
            failed(e);
            return 0;
        }
    }

    public static List<EpidemicReport> dataQuery(String sql) {
        List<EpidemicReport> reports = new ArrayList<>();
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                EpidemicReport report = read(results);
                reports.add(report);
            }
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
        }
        return reports;
    }

    public static List<String> datasets() {
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            List<String> datasets = new ArrayList();
            String sql = " SELECT DISTINCT data_set FROM Epidemic_Report";
            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                datasets.add(results.getString("data_set"));
            }
            return datasets;
        } catch (Exception e) {
            failed(e);
//            // logger.debug(e.toString());
            return null;
        }
    }

    public static List<Date> times() {
        List<Date> times = new ArrayList<>();
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = " SELECT DISTINCT time FROM Epidemic_Report";
            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                Date d = results.getTimestamp("time");
                if (d != null) {
                    times.add(d);
                }
            }
            return times;
        } catch (Exception e) {
            failed(e);
//            // logger.debug(e.toString());
            return null;
        }
    }

    public static List<Date> times(String dataset) {
        List<Date> times = new ArrayList<>();
        if (dataset == null) {
            return times;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = " SELECT DISTINCT time FROM Epidemic_Report WHERE data_set='"
                    + dataset + "' ORDER BY time desc";
            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                Date d = results.getTimestamp("time");
                if (d != null) {
                    times.add(d);
                }
            }
            return times;
        } catch (Exception e) {
            failed(e);
//            // logger.debug(e.toString());
            return null;
        }
    }

    public static List<String> countries(String dataset) {
        List<String> countries = new ArrayList<>();
        if (dataset == null) {
            return countries;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = " SELECT DISTINCT country FROM Epidemic_Report WHERE "
                    + " data_set='" + dataset + "' AND country IS NOT NULL "
                    + " ORDER BY country";
            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                countries.add(results.getString("country"));
            }
            if (countries.contains(message("China"))) {
                countries.remove(message("China"));
                countries.add(0, message("China"));
            }
            return countries;
        } catch (Exception e) {
            failed(e);
//            // logger.debug(e.toString());
            return null;
        }
    }

    public static List<String> provinces(String dataset, String country) {
        List<String> provinces = new ArrayList<>();
        if (dataset == null) {
            return provinces;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = " SELECT DISTINCT province FROM Epidemic_Report WHERE "
                    + " data_set='" + dataset + "' AND country='" + country + "' "
                    + " AND province IS NOT NULL "
                    + " ORDER BY province";
            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                provinces.add(results.getString("province"));
            }
            return provinces;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return null;
        }
    }

    public static List<String> cities(String dataset, String country,
            String province) {
        List<String> provinces = new ArrayList<>();
        if (dataset == null) {
            return provinces;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = " SELECT DISTINCT city FROM Epidemic_Report WHERE "
                    + " data_set='" + dataset + "' AND country='" + country + "' "
                    + " AND province='" + province + "' "
                    + " AND city IS NOT NULL AND level='" + message("City") + "'"
                    + " ORDER BY city";

            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                provinces.add(results.getString("city"));
            }
            return provinces;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return null;
        }
    }

    public static List<EpidemicReport> read(String dataset, int max) {
        List<EpidemicReport> locations = new ArrayList<>();
        if (dataset == null) {
            return locations;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            statement.setMaxRows(max);
            String sql = "SELECT * FROM Epidemic_Report WHERE data_set='" + dataset + "'";
            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                EpidemicReport location = read(results);
                locations.add(location);
            }
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
        }
        return locations;
    }

    public static List<EpidemicReport> read(String dataset, long time, int max) {
        List<EpidemicReport> locations = new ArrayList<>();
        if (dataset == null) {
            return locations;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            statement.setMaxRows(max);
            String sql = "SELECT * FROM Epidemic_Report WHERE "
                    + "data_set='" + dataset + "' AND time='" + DateTools.datetimeToString(time) + "'";
            ResultSet results = statement.executeQuery(sql);
            while (results.next()) {
                EpidemicReport location = read(results);
                locations.add(location);
            }
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
        }
        return locations;
    }

    public static EpidemicReport read(ResultSet results) {
        if (results == null) {
            return null;
        }
        try {
            EpidemicReport report = new EpidemicReport();
            report.setDataid(results.getLong("dataid"));
            report.setDataSet(results.getString("data_set"));
            report.setDataLabel(results.getString("data_label"));
            report.setLevel(results.getString("level"));
            report.setCountry(results.getString("country"));
            report.setProvince(results.getString("province"));
            report.setCity(results.getString("city"));
            report.setDistrict(results.getString("district"));
            report.setTownship(results.getString("township"));
            report.setNeighborhood(results.getString("neighborhood"));
            report.setConfirmed(results.getInt("confirmed"));
            report.setSuspected(results.getInt("suspected"));
            report.setHealed(results.getInt("healed"));
            report.setDead(results.getInt("dead"));
            report.setIncreasedConfirmed(results.getInt("increased_confirmed"));
            report.setIncreasedSuspected(results.getInt("increased_suspected"));
            report.setIncreasedHealed(results.getInt("increased_healed"));
            report.setIncreasedDead(results.getInt("increased_dead"));
            report.setLongitude(results.getDouble("longitude"));
            report.setLatitude(results.getDouble("latitude"));
            report.setComments(results.getString("comments"));
            Date d = results.getTimestamp("time");
            if (d != null) {
                report.setTime(d.getTime());
            }
            return report;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return null;
        }
    }

    public static boolean write(EpidemicReport report) {
        if (report == null) {
            return false;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            if (report.getDataid() < 0) {
                create(statement, report);
            } else {
                update(statement, report);
            }
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean write(List<EpidemicReport> reports) {
        if (reports == null || reports.isEmpty()) {
            return false;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            conn.setAutoCommit(true);
            for (EpidemicReport report : reports) {
                if (report.getDataid() < 0) {
                    create(statement, report);
                } else {
                    update(statement, report);
                }
            }
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean statistic() {
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            List<String> datasets = new ArrayList();
            String sql = " SELECT DISTINCT data_set FROM Epidemic_Report";
            ResultSet datasetsResults = statement.executeQuery(sql);
            while (datasetsResults.next()) {
                datasets.add(datasetsResults.getString("data_set"));
            }
            for (String dataset : datasets) {
                statistic(statement, dataset);
            }
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean statistic(String dataset) {
        if (dataset == null) {
            return false;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            statistic(statement, dataset);
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean statistic(Statement statement, String dataset) {
        if (dataset == null || statement == null) {
            return false;
        }
        try {

            List<String> countries = new ArrayList<>();
            String sql = " SELECT DISTINCT country FROM Epidemic_Report WHERE"
                    + " data_set='" + dataset + "' AND country IS NOT NULL";
            ResultSet countriesResults = statement.executeQuery(sql);
            while (countriesResults.next()) {
                String c = countriesResults.getString("country");
                if (c != null) {
                    countries.add(c);
                }
            }

            List<Date> times = new ArrayList<>();
            sql = " SELECT DISTINCT time FROM Epidemic_Report WHERE data_set='" + dataset + "'";
            ResultSet timesResults = statement.executeQuery(sql);
            while (timesResults.next()) {
                Date d = timesResults.getTimestamp("time");
                if (d != null) {
                    times.add(d);
                }
            }

            statisticCountries(statement, dataset, times, countries);
            statisticGlobal(statement, dataset, times);

            statisticCitiesIncreased(statement, dataset);
            statisticProvincesIncreased(statement, dataset);
            statisticCountriesIncreased(statement, dataset);
            statisticGlobalIncreased(statement, dataset);

            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean statisticGlobal(Statement statement, String dataset,
            List<Date> times) {
        try {

            int confirmed, healed, suspected, dead;
            for (Date d : times) {
                String sql = " SELECT sum(confirmed) FROM Epidemic_Report WHERE data_set='"
                        + dataset + "' AND time='" + DateTools.datetimeToString(d) + "' "
                        + " AND country IS NOT NULL AND level='" + message("Country") + "'";
                try ( ResultSet confirmedResults = statement.executeQuery(sql)) {
                    if (confirmedResults.next()) {
                        confirmed = confirmedResults.getInt(1);
                    } else {
                        confirmed = 0;
                    }
                    if (confirmed == 0) {
                        continue;
                    }
                }

                sql = " SELECT sum(suspected) FROM Epidemic_Report WHERE data_set='"
                        + dataset + "' AND time='" + DateTools.datetimeToString(d) + "' "
                        + " AND country IS NOT NULL AND level='" + message("Country") + "'";
                try ( ResultSet suspectedResults = statement.executeQuery(sql)) {
                    if (suspectedResults.next()) {
                        suspected = suspectedResults.getInt(1);
                    } else {
                        suspected = 0;
                    }
                }

                sql = " SELECT sum(healed) FROM Epidemic_Report WHERE data_set='"
                        + dataset + "' AND time='" + DateTools.datetimeToString(d) + "' "
                        + " AND country IS NOT NULL AND level='" + message("Country") + "'";
                ResultSet healedResults = statement.executeQuery(sql);
                if (healedResults.next()) {
                    healed = healedResults.getInt(1);
                } else {
                    healed = 0;
                }

                sql = " SELECT sum(dead) FROM Epidemic_Report WHERE data_set='"
                        + dataset + "' AND time='" + DateTools.datetimeToString(d) + "' "
                        + " AND country IS NOT NULL AND level='" + message("Country") + "'";
                try ( ResultSet deadResults = statement.executeQuery(sql)) {
                    if (deadResults.next()) {
                        dead = deadResults.getInt(1);
                    } else {
                        dead = 0;
                    }
                }

                EpidemicReport report = EpidemicReport.create().setDataSet(dataset)
                        .setLevel(message("Global"))
                        .setConfirmed(confirmed).setSuspected(suspected)
                        .setHealed(healed).setDead(dead)
                        .setTime(d.getTime());
                sql = " SELECT dataid FROM Epidemic_Report WHERE data_set='"
                        + dataset + "' AND time='" + DateTools.datetimeToString(d) + "' "
                        + " AND level='" + message("Global") + "'";
                ResultSet allResults = statement.executeQuery(sql);
                if (allResults.next()) {
                    update(statement, report);
                } else {
                    create(statement, report);
                }
            }
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean statisticCountries(Statement statement, String dataset,
            List<Date> times, List<String> countries) {
        try {
            for (String country : countries) {
                statisticCountry(statement, dataset, times, country);
            }
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean statisticCountry(Statement statement, String dataset,
            List<Date> times, String country) {
        try {

            String sql = "SELECT count(dataid) FROM Epidemic_Report WHERE country='" + country + "' "
                    + " AND level='" + message("Province") + "'";
            try ( ResultSet pcount = statement.executeQuery(sql)) {
                if (pcount.next()) {
                    int count = pcount.getInt(1);
                    if (count == 0) {
                        return false;
                    }
                }
            }

            double longitude = -200;
            double latitude = -200;
            sql = "SELECT * FROM Geography_Code WHERE address='" + country + "' "
                    + " AND level='" + message("Country") + "'";
            try ( ResultSet codeResults = statement.executeQuery(sql)) {
                if (codeResults.next()) {
                    longitude = codeResults.getDouble("longitude");
                    latitude = codeResults.getDouble("latitude");
                }
            }

            int confirmed = 0, healed = 0, suspected = 0, dead = 0;
            for (Date d : times) {
                sql = " SELECT sum(confirmed), sum(suspected),sum(healed), sum(dead) "
                        + " FROM Epidemic_Report WHERE data_set='"
                        + dataset + "' AND time='" + DateTools.datetimeToString(d) + "' "
                        + " AND country='" + country + "' AND level='" + message("Province") + "'";
                try ( ResultSet sumResults = statement.executeQuery(sql)) {
                    if (sumResults.next()) {
                        confirmed = sumResults.getInt(1);
                        suspected = sumResults.getInt(2);
                        healed = sumResults.getInt(3);
                        dead = sumResults.getInt(4);
                    } else {
                        confirmed = suspected = healed = dead = 0;
                    }
                    if (confirmed == 0) {
                        continue;
                    }
                }
                EpidemicReport report = EpidemicReport.create().setDataSet(dataset)
                        .setCountry(country).setLevel(message("Country"))
                        .setConfirmed(confirmed).setSuspected(suspected)
                        .setHealed(healed).setDead(dead)
                        .setTime(d.getTime())
                        .setLongitude(longitude).setLatitude(latitude);
                sql = " SELECT dataid FROM Epidemic_Report WHERE data_set='"
                        + dataset + "' AND time='" + DateTools.datetimeToString(d) + "' "
                        + " AND country='" + country + "'  AND level='" + message("Country") + "'";
                boolean exist = false;
                try ( ResultSet allResults = statement.executeQuery(sql)) {
                    if (allResults.next()) {
                        exist = true;
                    }
                }
                if (exist) {
                    update(statement, report);
                } else {
                    create(statement, report);
                }

            }
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean statisticCitiesIncreased(Statement statement,
            String dataset) {
        try {
            List<String> cities = new ArrayList<>();
            String sql = "SELECT DISTINCT city FROM Epidemic_Report WHERE"
                    + " data_set='" + dataset + "' AND city IS NOT NULL"
                    + " AND level='" + message("City") + "'";
            try ( ResultSet citiesResults = statement.executeQuery(sql)) {
                while (citiesResults.next()) {
                    String c = citiesResults.getString("city");
                    if (c != null) {
                        cities.add(c);
                    }
                }
            }
            for (String city : cities) {
                sql = "SELECT * FROM Epidemic_Report WHERE "
                        + "data_set='" + dataset + "' AND city='" + city + "'"
                        + " AND level='" + message("City") + "' ORDER BY time desc";
                List<EpidemicReport> citiesReports = new ArrayList<>();
                try ( ResultSet results = statement.executeQuery(sql)) {
                    while (results.next()) {
                        citiesReports.add(read(results));
                    }
                }
                for (int i = 0; i < citiesReports.size() - 1; i++) {
                    EpidemicReport report = citiesReports.get(i);
                    EpidemicReport reportLast = citiesReports.get(i + 1);
                    report.setIncreasedConfirmed(report.getConfirmed() - reportLast.getConfirmed());
                    report.setIncreasedHealed(report.getHealed() - reportLast.getHealed());
                    report.setIncreasedSuspected(report.getSuspected() - reportLast.getSuspected());
                    report.setIncreasedDead(report.getDead() - reportLast.getDead());
                    update(statement, report);
                }
            }
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean statisticProvincesIncreased(Statement statement,
            String dataset) {
        try {

            List<String> provinces = new ArrayList<>();
            String sql = " SELECT DISTINCT province FROM Epidemic_Report WHERE"
                    + " data_set='" + dataset + "' AND province IS NOT NULL"
                    + " AND level='" + message("Province") + "'";
            ResultSet provincesResults = statement.executeQuery(sql);
            while (provincesResults.next()) {
                String c = provincesResults.getString("province");
                if (c != null) {
                    provinces.add(c);
                }
            }
            for (String province : provinces) {
                sql = "SELECT * FROM Epidemic_Report WHERE "
                        + "data_set='" + dataset + "' AND province='" + province + "'"
                        + " AND level='" + message("Province") + "' ORDER BY time desc";
                List<EpidemicReport> provincesReports = new ArrayList<>();
                try ( ResultSet results = statement.executeQuery(sql)) {
                    while (results.next()) {
                        provincesReports.add(read(results));
                    }
                }
                for (int i = 0; i < provincesReports.size() - 1; i++) {
                    EpidemicReport report = provincesReports.get(i);
                    EpidemicReport reportLast = provincesReports.get(i + 1);
                    report.setIncreasedConfirmed(report.getConfirmed() - reportLast.getConfirmed());
                    report.setIncreasedHealed(report.getHealed() - reportLast.getHealed());
                    report.setIncreasedSuspected(report.getSuspected() - reportLast.getSuspected());
                    report.setIncreasedDead(report.getDead() - reportLast.getDead());
                    update(statement, report);
                }
            }
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean statisticCountriesIncreased(Statement statement,
            String dataset) {
        try {

            List<String> countries = new ArrayList<>();
            String sql = " SELECT DISTINCT country FROM Epidemic_Report WHERE"
                    + " data_set='" + dataset + "' AND country IS NOT NULL"
                    + " AND level='" + message("Country") + "'";
            ResultSet countriesResults = statement.executeQuery(sql);
            while (countriesResults.next()) {
                String c = countriesResults.getString("country");
                if (c != null) {
                    countries.add(c);
                }
            }
            for (String country : countries) {
                sql = "SELECT * FROM Epidemic_Report WHERE "
                        + "data_set='" + dataset + "' AND country='" + country + "'"
                        + " AND level='" + message("Country") + "' ORDER BY time desc";
                List<EpidemicReport> countriesReports = new ArrayList<>();
                try ( ResultSet results = statement.executeQuery(sql)) {
                    while (results.next()) {
                        countriesReports.add(read(results));
                    }
                }
                for (int i = 0; i < countriesReports.size() - 1; i++) {
                    EpidemicReport report = countriesReports.get(i);
                    EpidemicReport reportLast = countriesReports.get(i + 1);
                    report.setIncreasedConfirmed(report.getConfirmed() - reportLast.getConfirmed());
                    report.setIncreasedHealed(report.getHealed() - reportLast.getHealed());
                    report.setIncreasedSuspected(report.getSuspected() - reportLast.getSuspected());
                    report.setIncreasedDead(report.getDead() - reportLast.getDead());
                    update(statement, report);
                }
            }

            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean statisticGlobalIncreased(Statement statement,
            String dataset) {
        try {

            String sql = "SELECT * FROM Epidemic_Report WHERE "
                    + "data_set='" + dataset + "' "
                    + " AND level='" + message("Global") + "' ORDER BY time desc";
            List<EpidemicReport> globalReports = new ArrayList<>();
            try ( ResultSet results = statement.executeQuery(sql)) {
                while (results.next()) {
                    globalReports.add(read(results));
                }
            }
            for (int i = 0; i < globalReports.size() - 1; i++) {
                EpidemicReport report = globalReports.get(i);
                EpidemicReport reportLast = globalReports.get(i + 1);
                report.setIncreasedConfirmed(report.getConfirmed() - reportLast.getConfirmed());
                report.setIncreasedHealed(report.getHealed() - reportLast.getHealed());
                report.setIncreasedSuspected(report.getSuspected() - reportLast.getSuspected());
                report.setIncreasedDead(report.getDead() - reportLast.getDead());
                update(statement, report);
            }
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean create(Statement statement, EpidemicReport report) {
        if (statement == null || report == null) {
            return false;
        }
        try {
            String sql = "INSERT INTO Epidemic_Report(data_set, data_label, level, country, province, city, "
                    + "district, township, neighborhood, confirmed, suspected, healed, dead, "
                    + "increased_confirmed, increased_suspected, increased_healed, increased_dead, "
                    + "longitude, latitude, comments,time) VALUES(";
            sql += "'" + report.getDataSet() + "', ";
            if (report.getDataLabel() != null) {
                sql += "'" + report.getDataLabel() + "', ";
            } else {
                sql += "null, ";
            }
            if (report.getLevel() != null) {
                sql += "'" + report.getLevel() + "', ";
            } else {
                return false;
            }
            if (report.getCountry() != null) {
                sql += "'" + report.getCountry() + "', ";
            } else {
                sql += "null, ";
            }
            if (report.getProvince() != null) {
                sql += "'" + report.getProvince() + "', ";
            } else {
                sql += "null, ";
            }
            if (report.getCity() != null) {
                sql += "'" + report.getCity() + "', ";
            } else {
                sql += "null, ";
            }
            if (report.getDistrict() != null) {
                sql += "'" + report.getDistrict() + "', ";
            } else {
                sql += "null, ";
            }
            if (report.getTownship() != null) {
                sql += "'" + report.getTownship() + "', ";
            } else {
                sql += "null, ";
            }
            if (report.getNeighborhood() != null) {
                sql += "'" + report.getNeighborhood() + "', ";
            } else {
                sql += "null, ";
            }
            sql += report.getConfirmed() + ", ";
            sql += report.getSuspected() + ", ";
            sql += report.getHealed() + ", ";
            sql += report.getDead() + ", ";
            sql += report.getIncreasedConfirmed() + ", ";
            sql += report.getIncreasedSuspected() + ", ";
            sql += report.getIncreasedHealed() + ", ";
            sql += report.getIncreasedDead() + ", ";
            sql += report.getLongitude() + ", ";
            sql += report.getLatitude() + ", ";
            if (report.getComments() != null) {
                sql += "'" + report.getComments() + "', ";
            } else {
                sql += "null, ";
            }
            if (report.getTime() > 0) {
                sql += "'" + DateTools.datetimeToString(report.getTime()) + "' ";
            } else {
                sql += "null ";
            }
            sql += " )";
            statement.executeUpdate(sql);
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean update(Statement statement, EpidemicReport report) {
        if (statement == null || report == null || report.getDataid() < 0) {
            return false;
        }
        try {
            String sql = "UPDATE Epidemic_Report SET ";
            sql += "data_set='" + report.getDataSet() + "', ";
            if (report.getDataLabel() != null) {
                sql += "data_label='" + report.getDataLabel() + "', ";
            } else {
                sql += "data_label=null, ";
            }
            if (report.getLevel() != null) {
                sql += "level='" + report.getLevel() + "', ";
            } else {
                return false;
            }
            if (report.getCountry() != null) {
                sql += "country='" + report.getCountry() + "', ";
            } else {
                sql += "country=null, ";
            }
            if (report.getProvince() != null) {
                sql += "province='" + report.getProvince() + "', ";
            } else {
                sql += "province=null, ";
            }
            if (report.getCity() != null) {
                sql += "city='" + report.getCity() + "', ";
            } else {
                sql += "city=null, ";
            }
            if (report.getDistrict() != null) {
                sql += "district='" + report.getDistrict() + "', ";
            } else {
                sql += "district=null, ";
            }
            if (report.getTownship() != null) {
                sql += "township='" + report.getTownship() + "', ";
            } else {
                sql += "township=null, ";
            }
            if (report.getNeighborhood() != null) {
                sql += "neighborhood='" + report.getNeighborhood() + "', ";
            } else {
                sql += "neighborhood=null, ";
            }
            sql += "confirmed=" + report.getConfirmed() + ", ";
            sql += "suspected=" + report.getSuspected() + ", ";
            sql += "healed=" + report.getHealed() + ", ";
            sql += "dead=" + report.getDead() + ", ";
            sql += "increased_confirmed=" + report.getIncreasedConfirmed() + ", ";
            sql += "increased_suspected=" + report.getIncreasedSuspected() + ", ";
            sql += "increased_healed=" + report.getIncreasedHealed() + ", ";
            sql += "increased_dead=" + report.getIncreasedDead() + ", ";
            sql += "longitude=" + report.getLongitude() + ", ";
            sql += "latitude=" + report.getLatitude() + ", ";
            if (report.getComments() != null) {
                sql += "comments='" + report.getComments() + "', ";
            } else {
                sql += "comments=null, ";
            }
            if (report.getTime() > 0) {
                sql += "time='" + DateTools.datetimeToString(report.getTime()) + "' ";
            } else {
                sql += "time=null  ";
            }
            sql += "WHERE dataid=" + report.getDataid();
            statement.executeUpdate(sql);
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean delete(long dataid) {
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = "DELETE FROM Epidemic_Report WHERE dataid=" + dataid;
            statement.executeUpdate(sql);
            return true;
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return false;
        }
    }

    public static boolean delete(String dataset) {
        if (dataset == null) {
            return false;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String sql = "DELETE FROM Epidemic_Report WHERE data_set='" + dataset + "'";
            statement.executeUpdate(sql);
            return true;
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return false;
        }
    }

    public static boolean deleteData(List<EpidemicReport> values) {
        if (values == null || values.isEmpty()) {
            return false;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 Statement statement = conn.createStatement()) {
            String inStr = "( " + values.get(0).getDataid();
            for (int i = 1; i < values.size(); ++i) {
                inStr += ", " + values.get(i).getDataid();
            }
            inStr += " )";
            String sql = "DELETE FROM Epidemic_Report WHERE dataid IN " + inStr;
            statement.executeUpdate(sql);
            return true;
        } catch (Exception e) {
            failed(e);
//            // logger.debug(e.toString());
            return false;
        }
    }

    public static boolean migrate() {
        int size = TableEpidemicReport.size();
        if (size > 0) {
            try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                     Statement statement = conn.createStatement()) {
                String sql = "ALTER TABLE Epidemic_Report  add  column  level VARCHAR(1024)";
                statement.executeUpdate(sql);
                sql = "ALTER TABLE Epidemic_Report  add  column  district VARCHAR(2048)";
                statement.executeUpdate(sql);
                sql = "ALTER TABLE Epidemic_Report  add  column  township VARCHAR(2048)";
                statement.executeUpdate(sql);
                sql = "ALTER TABLE Epidemic_Report  add  column  neighborhood VARCHAR(2048)";
                statement.executeUpdate(sql);
                sql = "ALTER TABLE Epidemic_Report  add  column  increased_confirmed INTEGER";
                statement.executeUpdate(sql);
                sql = "ALTER TABLE Epidemic_Report  add  column  increased_suspected INTEGER";
                statement.executeUpdate(sql);
                sql = "ALTER TABLE Epidemic_Report  add  column  increased_healed INTEGER";
                statement.executeUpdate(sql);
                sql = "ALTER TABLE Epidemic_Report  add  column  increased_dead INTEGER";
                statement.executeUpdate(sql);

                sql = "ALTER TABLE Epidemic_Report  alter column time NOT NULL";
                statement.executeUpdate(sql);

                sql = "UPDATE Epidemic_Report SET level='" + message("Global")
                        + "' WHERE country IS NULL AND province IS NULL ";
                statement.executeUpdate(sql);

                sql = "UPDATE Epidemic_Report SET level='" + message("Country")
                        + "' WHERE country IS NOT NULL AND province IS NULL";
                statement.executeUpdate(sql);

                sql = "UPDATE Epidemic_Report SET level='" + message("Province")
                        + "' WHERE province IS NOT NULL";
                statement.executeUpdate(sql);

                sql = "UPDATE Epidemic_Report SET level='" + message("City")
                        + "' WHERE level IS NULL";
                statement.executeUpdate(sql);

                sql = "ALTER TABLE Epidemic_Report  alter column level NOT NULL";
                statement.executeUpdate(sql);

            } catch (Exception e) {
                logger.debug(e.toString());
                failed(e);
                return false;
            }

            File tmpFile = new File(AppVariables.MyboxDataPath + File.separator + "data"
                    + File.separator + "Epidemic_Report_backup6.1_" + (new Date().getTime()) + ".del");
            tmpFile.mkdirs();
            DerbyBase.exportData("Epidemic_Report", tmpFile.getAbsolutePath());
            AppVariables.setSystemConfigValue("EpidemicReportBackup6.1.5", tmpFile.getAbsolutePath());
        }

        new TableEpidemicReport().drop();
        new TableEpidemicReport().init();
        return true;
    }

}
